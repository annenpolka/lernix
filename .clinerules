## 作業開始準備

`git status` で現在の git のコンテキストを確認します。
もし指示された内容と無関係な変更が多い場合、現在の変更からユーザーに別のタスクとして開始するように提案してください。

無視するように言われた場合は、そのまま続行します。

## コーディングプラクティス・開発プロセスのルール
- いついかなる時も以下の原則に必ず従って開発を進めること

### エヴァンスのDDD
- ユビキタス言語：共通言語の確立
- バウンデッドコンテキスト：境界の明確化
- エンティティ/値オブジェクト：識別性vs属性性
- 集約：整合性単位の設定
- その他、エヴァンスによるDDDのプラクティスに従う

### ベックのTDD
- Red-Green-Refactor：失敗→成功→改善
- 常に実装前にテストを作成：設計の指針
- 小さな検証サイクル：即時フィードバック
- 回帰防止：変更の安全性確保
- ベックによるTDDのプラクティスに従う

### ファウラーの思想
- リファクタリング：動作維持での構造改善
- コードスメル：問題兆候の検知
- CI/CD：継続的な統合と配信
- 進化的アーキテクチャ：変化への適応
- その他、ファウラーによるプラクティスに従う

### 関数型プログラミング
- 純粋関数：予測可能な結果
- 不変性：副作用の排除
- 高階関数：関数を値として扱う
- 宣言的プログラミング：意図の明確化
- 型安全性の確保
- その他、関数型プログラミングのプラクティスに従う
